const fs = require("fs");
const path = require("path");
const cron = require("cron");

/**
 * Fun√ß√£o principal que envia promo√ß√µes para grupos em hor√°rios agendados.
 * Os IDs dos grupos ser√£o importados de um array externo (ex: index.js ou groups.js).
 * @param {Object} sock - Inst√¢ncia do Baileys
 * @param {Array<string>} groupIds - Lista de IDs dos grupos para envio (m√°x. 4)
 */
async function schedulePromotions(sock, groupIds) {
    // Limitar para no m√°ximo 4 grupos
    const targetGroups = groupIds.slice(0, 4);

    // ‚è∞ Definir hor√°rios de execu√ß√£o (4x ao dia) - formato: minuto hora * * *
    const cronTimes = [
        "37 10 * * *",   // 10:35
        "35 12 * * *",   // 12:35
        "35 17 * * *",   // 17:35
        "35 21 * * *",   // 21:35
    ];

    cronTimes.forEach(cronTime => {
        new cron.CronJob(cronTime, async () => {
            const now = new Date().toLocaleString("pt-BR", { timeZone: "Africa/Maputo" });
            console.log(`\n[PROMO SCHEDULER] üïí Iniciando disparo agendado √†s ${now} (Hor√°rio de Mo√ßambique)`);

            for (const groupId of targetGroups) {
                try {
                    console.log(`[PROMO] üöÄ Iniciando envio para grupo: ${groupId}`);

                    // ‚úÖ Obter participantes para men√ß√£o
                    const groupMetadata = await sock.groupMetadata(groupId).catch(() => null);
                    if (!groupMetadata) {
                        console.warn(`[PROMO] ‚ö†Ô∏è N√£o consegui carregar os dados do grupo ${groupId}`);
                        continue; // Pula para o pr√≥ximo grupo
                    }
                    const mentions = groupMetadata.participants.map(p => p.id);

                    // üîé Caminho das imagens (usa a pasta "fotos/")
                    const tabelaImg = path.join(__dirname, "../fotos/tabela.jpg");
                    const ilimitadoImg = path.join(__dirname, "../fotos/ilimitado.png");
                    const netflixImg = path.join(__dirname, "../fotos/Netflix.jpeg");

                    // ‚è≥ Fun√ß√£o auxiliar para esperar
                    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

                    // 1Ô∏è‚É£ Envia tabela de pacotes
                    if (fs.existsSync(tabelaImg)) {
                        await sock.sendMessage(groupId, {
                            image: fs.readFileSync(tabelaImg),
                            caption: "üìä *Tabela Completa de Pacotes Atualizada!*"
                        });
                        await sleep(5000);
                    }

                    // 2Ô∏è‚É£ Envia plano Ilimitado
                    if (fs.existsSync(ilimitadoImg)) {
                        const legendaIlimitado = `üìû *TUDO TOP VODACOM*\nüìç Chamadas e SMS ilimitadas para Todas Redes\n\nüìÜ 30 dias\n\n450MT üî• 11GB + ilimitado chamadas/SMS\n550MT üî• 16GB + ilimitado chamadas/SMS\n650MT üî• 21GB + ilimitado chamadas/SMS\n850MT üî• 31GB + ilimitado chamadas/SMS\n1080MT üî• 41GB + ilimitado chamadas/SMS\n1300MT üî• 51GB + ilimitado chamadas/SMS\n\n> TOPAINETGIGAS üõú‚úÖ`;
                        await sock.sendMessage(groupId, {
                            image: fs.readFileSync(ilimitadoImg),
                            caption: legendaIlimitado
                        });
                        await sleep(5000);
                    }

                    // 3Ô∏è‚É£ Envia promo√ß√£o Netflix
                    if (fs.existsSync(netflixImg)) {
                        await sock.sendMessage(groupId, {
                            image: fs.readFileSync(netflixImg),
                            caption: "üé¨ *Promo√ß√£o Netflix Ativada!*"
                        });
                        await sleep(5000);
                    }

                    // 4Ô∏è‚É£ Envia formas de pagamento
                    const formasPagamento = `üì± *Formas de Pagamento Atualizadas* üí≥\n
1. M-PESA üì±  
   - N√∫mero: 848619531  
   - DINIS MARTA  

2. E-MOLA üí∏  
   - N√∫mero: 872960710  
   - MANUEL ZOCA  

3. BIM üè¶  
   - Conta n¬∫: 1059773792  
   - CHONGO MANUEL  

Ap√≥s efetuar o pagamento, por favor, envie o comprovante da transfer√™ncia juntamente com seu contato.`;
                    await sock.sendMessage(groupId, { text: formasPagamento });
                    await sleep(4000);

                    // 5Ô∏è‚É£ Envia link + men√ß√£o a todos
                    const linkMsg = `üåê *Acesse nosso site:* https://topai-net-gigas.netlify.app/      

üíé Quem fizer pedidos pelo site ganha b√¥nus exclusivo: *Bacela* üéÅ  

@todos`;
                    await sock.sendMessage(groupId, {
                        text: linkMsg,
                        mentions
                    });

                    console.log(`[PROMO] ‚úÖ Promo√ß√µes enviadas com sucesso para: ${groupId}`);

                } catch (err) {
                    console.error(`‚ùå Erro ao enviar promo√ß√µes para ${groupId}:`, err.message);
                }
            }

            console.log(`[PROMO SCHEDULER] ‚úÖ Ciclo de disparos conclu√≠do √†s ${now} (Hor√°rio de Mo√ßambique)`);

        }, null, true, "Africa/Maputo"); // ‚úÖ FUSO HOR√ÅRIO CORRETO PARA MO√áAMBIQUE
    });

    console.log(`[PROMO SCHEDULER] ‚úÖ Agendamento configurado para 4x ao dia nos hor√°rios: 10:35, 12:35, 17:35, 21:35 (√Åfrica/Maputo)`);
    console.log(`[PROMO SCHEDULER] üì© Grupos alvo:`, targetGroups);
}

module.exports = { schedulePromotions };