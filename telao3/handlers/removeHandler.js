// Importa a vari√°vel global de resultados tempor√°rios
const { resultadosTemp } = require("./listarHandler");

exports.handleRemove = async (sock, msg) => {
    try {
        const from = msg.key.remoteJid;

        // Verifica se √© grupo
        if (!from.endsWith('@g.us')) {
            return sock.sendMessage(from, { text: '‚ùå Este comando s√≥ funciona em grupos!' });
        }

        // Extrai o comando da mensagem
        const rawCommand = (msg.message?.conversation || msg.message?.extendedTextMessage?.text || "").trim();
        console.log(`üì¶ Comando recebido: "${rawCommand}"`);

        // Remove todos os espa√ßos extras para evitar problemas de formata√ß√£o
        const cleanedCommand = rawCommand.replace(/\s+/g, '');
        console.log(`üì¶ Comando limpo: "${cleanedCommand}"`);

        // Regex para capturar o n√∫mero ap√≥s @remove
        const match = cleanedCommand.match(/^@remove(\d+)$/);
        if (!match) {
            console.error(`‚ùå Regex falhou para o comando: "${cleanedCommand}"`);
            return sock.sendMessage(from, { text: '‚ùå Comando inv√°lido. Use `@remove X`, onde X √© o n√∫mero do participante na lista.' });
        }

        const indexToRemove = parseInt(match[1], 10) - 1; // Converte para √≠ndice baseado em zero
        console.log(`üì¶ √çndice extra√≠do: ${indexToRemove}`);

        // Verifica se h√° resultados armazenados para o grupo
        if (!resultadosTemp[from] || resultadosTemp[from].length === 0) {
            console.error(`‚ùå Nenhum resultado tempor√°rio dispon√≠vel para o grupo: ${from}`);
            return sock.sendMessage(from, { text: '‚ùå Nenhuma lista de participantes dispon√≠vel para este grupo. Use o comando de listagem primeiro.' });
        }

        console.log(`üì¶ Resultados tempor√°rios para o grupo (${from}):`, resultadosTemp[from]);

        // Verifica se o √≠ndice √© v√°lido
        if (indexToRemove < 0 || indexToRemove >= resultadosTemp[from].length) {
            console.error(`‚ùå √çndice inv√°lido: ${indexToRemove} (tamanho da lista: ${resultadosTemp[from].length})`);
            return sock.sendMessage(from, { text: '‚ùå √çndice inv√°lido. Certifique-se de usar um n√∫mero presente na lista.' });
        }

        // Remove o participante selecionado
        const jidToRemove = resultadosTemp[from][indexToRemove];
        console.log(`üì¶ JID a ser removido: ${jidToRemove}`);

        try {
            await sock.groupParticipantsUpdate(
                from, // ID do grupo
                [jidToRemove], // Remove um participante por vez
                "remove" // A√ß√£o: remover
            );
            console.log(`‚úÖ Participante removido com sucesso: ${jidToRemove}`);
        } catch (groupError) {
            console.error(`üö® Erro ao remover participante (${jidToRemove}):`, groupError);
            return sock.sendMessage(from, { text: '‚ùå N√£o foi poss√≠vel remover o participante. Verifique as permiss√µes do bot.' });
        }

        // Atualiza a lista tempor√°ria removendo o participante removido
        resultadosTemp[from].splice(indexToRemove, 1);
        console.log(`üì¶ Lista atualizada ap√≥s remo√ß√£o:`, resultadosTemp[from]);

        // Envia confirma√ß√£o
        await sock.sendMessage(from, { text: `‚úÖ Participante ${jidToRemove.split('@')[0]} foi removido do grupo.` });

    } catch (error) {
        console.error('üö® Erro cr√≠tico ao processar comando de remo√ß√£o:', error);
        await sock.sendMessage(from, { text: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.' });
    }
};